on: pull_request

jobs:
  comment_pr:
    runs-on: ubuntu-latest
    name: comment a PR
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            辛苦你參與本次的練習。首先參觀看看其他夥伴們的成果吧，有沒有你認識的朋友或是熟悉的語言呢？
            和其他夥伴相較你的程式碼有沒有明顯的好或壞？

            雖然說能正確執行、能賺錢的 code 都是好 code，但很明顯還是有好不好閱讀和維護的差別吧？
            接著我們來看看 Sandi Metz 2014 在 RailsConf 的(分享)[https://www.youtube.com/watch?v=8bZh5LMaSmE]

            ---

            分享我對這個影片的感想：
            1. 一定很害怕要接手維護 legacy code 吧？改 A 壞 B 怎麼辦？
            2. 有寫測試才敢安心重構
            3. 測試要有被執行才有用 (CI 不能停)
            4. 只要測試可信任，legacy code 的複雜邏輯都不用看也可以開始重構
            5. 錯誤的抽象比重複更可怕
            6. SOLID 裡面的 O，開放封閉原則說的對擴展開放，對修改封閉是什麼意思？難道要處理 bug 也不能修改嗎？做到會怎樣做不到又會怎樣？
            7. 如何透過設計，針對有限的預期範圍內擴展的需求？
            8. 如果一個需求擴展的 pr 發出來權都是綠色 (add) 完全沒有紅色 (delete/modify)，有可能會改壞舊程式嗎？
